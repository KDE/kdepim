#include "tokenizer.h"
#include <algorithm>
#include <vector>
#include <string>
#include <cassert>

using std::string;
using std::vector;

namespace {
vector<string> split( const char* str, const char delim ) {
	assert( str );
	vector<string> res;
	while ( *str == delim ) ++str;
	while ( *str ) {
		const char* start = str++;
		while ( *str && *str != delim ) ++str;
		res.push_back( string( start, str ) );
		while ( *str == delim ) ++str;
	}
	return res;
}

class latin1_tokenizer : public indexlib::detail::tokenizer {
	private:
		static const char stop = 46; // .
		static void normalize( char& c ) {
			const char result[] = {
				stop, //  [ 0 ]
				stop, //  [ 1 ]
				stop, //  [ 2 ]
				stop, //  [ 3 ]
				stop, //  [ 4 ]
				stop, //  [ 5 ]
				stop, //  [ 6 ]
				stop, //  [ 7 ]
				stop, // ^H [ 8 ]
				stop, // \t [ 9 ]
				stop, // [ 10 ]
				stop, //  [ 11 ]
				stop, //  [ 12 ]
				stop, //  [ 13 ]
				stop, //  [ 14 ]
				stop, //  [ 15 ]
				stop, //  [ 16 ]
				stop, //  [ 17 ]
				stop, //  [ 18 ]
				stop, //  [ 19 ]
				stop, //  [ 20 ]
				stop, //  [ 21 ]
				stop, //  [ 22 ]
				stop, //  [ 23 ]
				stop, //  [ 24 ]
				stop, //  [ 25 ]
				stop, //  [ 26 ]
				stop, //  [ 27 ]
				stop, //  [ 28 ]
				stop, //  [ 29 ]
				stop, //  [ 30 ]
				stop, //  [ 31 ]
				stop, //  [ 32 ]
				stop, // ! [ 33 ]
				stop, // " [ 34 ]
				stop, // # [ 35 ]
				stop, // $ [ 36 ]
				stop, // % [ 37 ]
				stop, // & [ 38 ]
				stop, // ' [ 39 ]
				stop, // ( [ 40 ]
				stop, // ) [ 41 ]
				stop, // * [ 42 ]
				stop, // + [ 43 ]
				stop, // , [ 44 ]
				stop, // - [ 45 ]
				stop, // . [ 46 ]
				stop, // / [ 47 ]
				'0', // 0 [ 48 ]
				'1', // 1 [ 49 ]
				'2', // 2 [ 50 ]
				'3', // 3 [ 51 ]
				'4', // 4 [ 52 ]
				'5', // 5 [ 53 ]
				'6', // 6 [ 54 ]
				'7', // 7 [ 55 ]
				'8', // 8 [ 56 ]
				'9', // 9 [ 57 ]
				stop, // : [ 58 ]
				stop, // ; [ 59 ]
				stop, // < [ 60 ]
				stop, // = [ 61 ]
				stop, // > [ 62 ]
				stop, // ? [ 63 ]
				stop, // @ [ 64 ]
				'A', // A [ 65 ]
				'B', // B [ 66 ]
				'C', // C [ 67 ]
				'D', // D [ 68 ]
				'E', // E [ 69 ]
				'F', // F [ 70 ]
				'G', // G [ 71 ]
				'H', // H [ 72 ]
				'I', // I [ 73 ]
				'J', // J [ 74 ]
				'K', // K [ 75 ]
				'L', // L [ 76 ]
				'M', // M [ 77 ]
				'N', // N [ 78 ]
				'O', // O [ 79 ]
				'P', // P [ 80 ]
				'Q', // Q [ 81 ]
				'R', // R [ 82 ]
				'S', // S [ 83 ]
				'T', // T [ 84 ]
				'U', // U [ 85 ]
				'V', // V [ 86 ]
				'W', // W [ 87 ]
				'X', // X [ 88 ]
				'Y', // Y [ 89 ]
				'Z', // Z [ 90 ]
				stop, // [ [ 91 ]
				stop, // \ [ 92 ]
				stop, // ] [ 93 ]
				stop, // ^ [ 94 ]
				stop, // _ [ 95 ]
				stop, // ` [ 96 ]
				'A', // a [ 97 ]
				'B', // b [ 98 ]
				'C', // c [ 99 ]
				'D', // d [ 100 ]
				'E', // e [ 101 ]
				'F', // f [ 102 ]
				'G', // g [ 103 ]
				'H', // h [ 104 ]
				'I', // i [ 105 ]
				'J', // j [ 106 ]
				'K', // k [ 107 ]
				'L', // l [ 108 ]
				'M', // m [ 109 ]
				'N', // n [ 110 ]
				'O', // o [ 111 ]
				'P', // p [ 112 ]
				'Q', // q [ 113 ]
				'R', // r [ 114 ]
				'S', // s [ 115 ]
				'T', // t [ 116 ]
				'U', // u [ 117 ]
				'V', // v [ 118 ]
				'W', // w [ 119 ]
				'X', // x [ 120 ]
				'Y', // y [ 121 ]
				'Z', // z [ 122 ]
				stop, // { [ 123 ]
				stop, // | [ 124 ]
				stop, // } [ 125 ]
				stop, // ~ [ 126 ]
				stop, //  [ 127 ]
				stop, // Ä [ 128 ]
				stop, // Å [ 129 ]
				stop, // Ç [ 130 ]
				stop, // É [ 131 ]
				stop, // Ñ [ 132 ]
				stop, // Ö [ 133 ]
				stop, // Ü [ 134 ]
				stop, // á [ 135 ]
				stop, // à [ 136 ]
				stop, // â [ 137 ]
				stop, // ä [ 138 ]
				stop, // ã [ 139 ]
				stop, // å [ 140 ]
				stop, // ç [ 141 ]
				stop, // é [ 142 ]
				stop, // è [ 143 ]
				stop, // ê [ 144 ]
				stop, // ë [ 145 ]
				stop, // í [ 146 ]
				stop, // ì [ 147 ]
				stop, // î [ 148 ]
				stop, // ï [ 149 ]
				stop, // ñ [ 150 ]
				stop, // ó [ 151 ]
				stop, // ò [ 152 ]
				stop, // ô [ 153 ]
				stop, // ö [ 154 ]
				stop, // õ [ 155 ]
				stop, // ú [ 156 ]
				stop, // ù [ 157 ]
				stop, // û [ 158 ]
				stop, // ü [ 159 ]
				stop, // † [ 160 ]
				stop, // ° [ 161 ]
				stop, // ¢ [ 162 ]
				stop, // £ [ 163 ]
				stop, // § [ 164 ]
				stop, // • [ 165 ]
				stop, // ¶ [ 166 ]
				stop, // ß [ 167 ]
				stop, // ® [ 168 ]
				stop, // © [ 169 ]
				stop, // ™ [ 170 ]
				stop, // ´ [ 171 ]
				stop, // ¨ [ 172 ]
				stop, // ≠ [ 173 ]
				stop, // Æ [ 174 ]
				stop, // Ø [ 175 ]
				stop, // ∞ [ 176 ]
				stop, // ± [ 177 ]
				stop, // ≤ [ 178 ]
				stop, // ≥ [ 179 ]
				stop, // ¥ [ 180 ]
				stop, // µ [ 181 ]
				stop, // ∂ [ 182 ]
				stop, // ∑ [ 183 ]
				stop, // ∏ [ 184 ]
				stop, // π [ 185 ]
				stop, // ∫ [ 186 ]
				stop, // ª [ 187 ]
				stop, // º [ 188 ]
				stop, // Ω [ 189 ]
				stop, // æ [ 190 ]
				stop, // ø [ 191 ]
				'A', // ¿ [ 192 ]
				'A', // ¡ [ 193 ]
				'A', // ¬ [ 194 ]
				'A', // √ [ 195 ]
				'A', // ƒ [ 196 ]
				'A', // ≈ [ 197 ]
				'A', // ∆ [ 198 ]
				'C', // « [ 199 ]
				'E', // » [ 200 ]
				'E', // … [ 201 ]
				'E', //   [ 202 ]
				'E', // À [ 203 ]
				'I', // Ã [ 204 ]
				'I', // Õ [ 205 ]
				'I', // Œ [ 206 ]
				'I', // œ [ 207 ]
				'D', // – [ 208 ]
				'N', // — [ 209 ]
				'O', // “ [ 210 ]
				'O', // ” [ 211 ]
				'O', // ‘ [ 212 ]
				'O', // ’ [ 213 ]
				'O', // ÷ [ 214 ]
				'X', // ◊ [ 215 ]
				'O', // ÿ [ 216 ]
				'U', // Ÿ [ 217 ]
				'U', // ⁄ [ 218 ]
				'U', // € [ 219 ]
				'U', // ‹ [ 220 ]
				'Y', // › [ 221 ]
				'T', // ﬁ [ 222 ]
				'S', // ﬂ [ 223 ]
				'A', // ‡ [ 224 ]
				'A', // · [ 225 ]
				'A', // ‚ [ 226 ]
				'A', // „ [ 227 ]
				'A', // ‰ [ 228 ]
				'A', // Â [ 229 ]
				'A', // Ê [ 230 ]
				'C', // Á [ 231 ]
				'E', // Ë [ 232 ]
				'E', // È [ 233 ]
				'E', // Í [ 234 ]
				'E', // Î [ 235 ]
				'I', // Ï [ 236 ]
				'I', // Ì [ 237 ]
				'I', // Ó [ 238 ]
				'I', // Ô [ 239 ]
				stop, //  [ 240 ]
				'N', // Ò [ 241 ]
				'O', // Ú [ 242 ]
				'O', // Û [ 243 ]
				'O', // Ù [ 244 ]
				'O', // ı [ 245 ]
				'O', // ˆ [ 246 ]
				stop, // ˜ [ 247 ]
				'O', // ¯ [ 248 ]
				'U', // ˘ [ 249 ]
				'U', // ˙ [ 250 ]
				'U', // ˚ [ 251 ]
				'U', // ¸ [ 252 ]
				'Y', // ˝ [ 253 ]
				'T', // ˛ [ 254 ]
				'Y' // ˇ [ 255 ]
			};
			c = result[ static_cast<unsigned char>( c ) ];
		}
		std::vector<std::string> do_string_to_words( const char* str ) {
			string complete = str;
			std::for_each( complete.begin(), complete.end(), normalize );
			return split( complete.c_str(), stop );
		}
};
}


std::auto_ptr<indexlib::detail::tokenizer> indexlib::detail::get_tokenizer( std::string name ) {
	if ( name == "latin-1:european" ) return std::auto_ptr<indexlib::detail::tokenizer>( new latin1_tokenizer );
	return std::auto_ptr<indexlib::detail::tokenizer>( 0 );
}
