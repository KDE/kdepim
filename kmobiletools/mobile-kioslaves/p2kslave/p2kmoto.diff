Index: test/p2ktest.c
===================================================================
--- test/p2ktest.c	(revisione 69)
+++ test/p2ktest.c	(copia locale)
@@ -118,7 +118,7 @@
 	}
 
 	printf("-------\n");
-	if (p2k_detectPhone()<0)
+    if (p2k_detectPhone(nfo)<0)
 	{
 		printf("No P2K phone found\n\n");
 		return;
Index: src/p2kmoto.h
===================================================================
--- src/p2kmoto.h	(revisione 69)
+++ src/p2kmoto.h	(copia locale)
@@ -220,7 +220,7 @@
  *
  * @return 0 if success.
  */
-int p2k_detectPhone();
+int p2k_detectPhone(struct p2k_devInfo* usbDevices);
 
 /**
  * @brief Get list of connected USB devices
Index: src/p2kmoto.c
===================================================================
--- src/p2kmoto.c	(revisione 69)
+++ src/p2kmoto.c	(copia locale)
@@ -232,23 +232,27 @@
 
 
 // Detects phone
-int p2k_detectPhone()
+int p2k_detectPhone(struct p2k_devInfo* usbDevices)
 {
-	struct p2k_devInfo * usbDevices;
+  FUNC("p2k_detectPhone");
+  printf("usbDevices: %d; device 0: %s\n", usbDevices, usbDevices[0].manufacturerStr);
+// 	struct p2k_devInfo * usbDevices;
 	
-	usbDevices=p2k_getDevList();
-	while (usbDevices->vendor >0)
+  if(usbDevices==0) usbDevices=p2k_getDevList();
+  uint i=0;
+	while (usbDevices[i].vendor >=0)
 	{
-		if (strstr(usbDevices->manufacturerStr, VENDOR_CONTAINS) &&
-			strstr(usbDevices->productStr, PRODUCT_CONTAINS))
+      printf("device %d; Vendor='%s`; product='%s`\n", i, usbDevices[i].manufacturerStr, usbDevices[i].productStr);
+		if (strstr(usbDevices[i].manufacturerStr, VENDOR_CONTAINS) &&
+			strstr(usbDevices[i].productStr, PRODUCT_CONTAINS))
 		{
-			if (usbDevices->product % 2 == 1)
-				usbDevices->product++;
-			p2k_setATconfig(usbDevices->vendor, usbDevices->product);
-			p2k_setP2Kconfig(usbDevices->vendor, usbDevices->product-1);	
+			if (usbDevices[i].product % 2 == 1)
+				usbDevices[i].product++;
+			p2k_setATconfig(usbDevices[i].vendor, usbDevices[i].product);
+			p2k_setP2Kconfig(usbDevices[i].vendor, usbDevices[i].product-1);	
 			return 0;
 		}
-		usbDevices++;
+		i++;
 	}
 	return -1;
 }
@@ -531,6 +535,15 @@
 	phoneHandle=0;
 	
 	t=time(NULL);
+    if(1)
+    {
+      phoneHandle = usb_open(phone);
+      usb_close(phoneHandle);
+      phoneHandle = usb_open(phone);
+      if (phoneHandle==0) RAISE(P2K_E_CANT_OPEN, "Unable to open phone\n");
+//       if (usb_claim_interface(phoneHandle, INTERFACE_TEST_COMMAND)) RAISE(P2K_E_CANT_CLAIMIFACE, "Unable to claim the interface");
+      return(0);
+    }
 	do
 	{	
 		phoneHandle = usb_open(phone);
@@ -600,6 +613,16 @@
 	if (dir==DIR_OUT) p2k_showArr((unsigned char *)bytes, size);
 #endif
 	ret=usb_control_msg(dev, requesttype, request, value, index, bytes, size, timeout);
+ if(ret<0)
+ {
+   uint retry=0;
+   while(retry<50)
+   {
+     ret=usb_control_msg(dev, requesttype, request, value, index, bytes, size, timeout);
+     if(ret>0) break;
+     usleep(100000);
+   }
+ }
 #ifdef P2K_DEBUG
 	printf("   result=%04d",ret);
 #endif
@@ -643,7 +666,7 @@
 	t=time(NULL);
 
 #ifdef P2K_DEBUG
-	SLEEP(20);
+// 	SLEEP(20);
 #endif
 	// Waiting 5 sec for each answer.
 	while (time(NULL)-t<5)
@@ -653,8 +676,11 @@
 #ifdef P2K_DEBUG
 		else printf("Error answer. try again\n");
 #endif
-		SLEEP(10);
+		usleep(1000);
 	}
+#ifdef P2K_DEBUG
+    printf("inpSize returning: %04x\n", ret);
+#endif
 	return(ret);
 
 }
@@ -1360,7 +1386,7 @@
 {
 	FUNC("FSAC_Read");
 	unsigned char cmd[]={0xFF, 0xFF, 0x00, 0x4A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xAA, 0xAA};
-	INT16 t;
+// 	INT16 t;
 	int sz;
 	unsigned char * tmp;
 	int ret;
@@ -1368,7 +1394,7 @@
 
 		
 	if (size>0x400) RAISE(P2K_E_BUFFER_TOOLONG, "E00");
-	setInt16(cmd+0x0e,t);
+	setInt16(cmd+0x0e,size);
 	
 	if (p2k_outData(cmd, sizeof(cmd))<0) RAISE(P2K_E_OUTDATA, "E01");
 	if (p2k_inpSize(packetCount, sizeof(packetCount))!=4) RAISE(P2K_E_INPSIZE, "E02");
