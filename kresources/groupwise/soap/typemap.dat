#	typemap.dat
#
#	Use this file to define namespace prefix and type bindings for
#	the generated header files by the 'wsdl2h' tool.  typemap.dat is the
#	default file processed by 'wsdl2h' to customize its output. You can use
#	wsdl2h option -t to specify an alternate file.
#
#	XML namespace prefix bindings can be provided to override the default
#	choice of the ns1, ns2, ... prefixes generated by wsdl2h.  It is highly
#	recommended to provide namespace prefixes for your project's XML
#	namespaces. In this way, changes to the WSDL (or newer releases of
#	wsdl2h) will have a minimal impact on coding.
#	Bindings for namespace prefixes are of the form:
#		prefix = "URI"
#	For example, to bind the 'wsse' prefix to the WS-Security extensions:
#		wsse = "http://schemas.xmlsoap.org/ws/2002/04/secext"
#
#	Type bindings can by provided to bind XML schema types to C/C++ types
#	for your project.
#	Type bindings are of the form:
#		prefix__type = declaration | use | ptr-use
#	where 'declaration' introduces the type in the header file, 'use'
#	specifies how the type is used directly, 'ptr-use' specifies how the
#	type is used as a pointer type.
#	For example:
#		xsd__string = | char* | char*
#	After enabling this line, all XSD strings will be mapped to char*. Note
#	that the 'declaration' part is empty in this case.
#
#	Member data and functions can be provided to extend a generated struct
#	or class.
#	Class and struct extensions are of the form:
#		prefix__type = $ member-declaration
#	For example, to add a constructor and destructor to class myns__record:
#		myns__record = $ myns__record();
#		myns__record = $ ~myns__record();
#	
#	Any other material to be included in the generated header file can be
#	provided by enclosing the text within brackets [ and ]. Brackets MUST
#	appear at the start of a new line.
#	For example, to include a note:
#[
#// TODO: Don't forget to bind the namespace prefixes!
#]
#	This comment appears as the first line in the generated header file.
#
#-------------------------------------------------------------------------------
#gSOAP XML Web services tools
#Copyright (C) 2004-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
#This software is released under one of the following two licenses:
#GPL or Genivia's license for commercial use.
#-------------------------------------------------------------------------------
#GPL license.
#
#This program is free software; you can redistribute it and/or modify it under
#the terms of the GNU General Public License as published by the Free Software
#Foundation; either version 2 of the License, or (at your option) any later
#version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License along with
#this program; if not, write to the Free Software Foundation, Inc., 59 Temple
#Place, Suite 330, Boston, MA 02111-1307 USA
#
#Author contact information:
#engelen@genivia.com / engelen@acm.org
#-------------------------------------------------------------------------------
#A commercial use license is available from Genivia, Inc., contact@genivia.com
#-------------------------------------------------------------------------------

[
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
]

#	For WhiteMesa interoperability testing round 2:

i	= "http://www.soapinterop.org/"
s	= "http://www.soapinterop.org/xsd"

#	Amazon Web Services:

aws	= "urn:PI/DevCentral/SoapService"

#	MTOM xop and xmime

xop	= <http://www.w3.org/2004/08/xop/include>
xmime	= <http://www.w3.org/2004/06/xmlmime>
xmlmime	= <http://www.w3.org/2004/11/xmlmime>

xmime__contentType = | char* | char*
xmlmime__contentType = | char* | char*

#	WS-Addressing

wsa	= <http://schemas.xmlsoap.org/ws/2004/08/addressing>

#	Bindings for WS-* protocols:

dsig	= "http://www.w3.org/2000/09/xmldsig#"
xenc	= "http://www.w3.org/2001/04/xmlenc#"
wsrp	= "http://schemas.xmlsoap.org/rp/"
wsse	= "http://schemas.xmlsoap.org/ws/2002/04/secext"
wsa3	= "http://schemas.xmlsoap.org/ws/2003/03/addressing"
wsp	= "http://schemas.xmlsoap.org/ws/2004/09/policy"
wsu	= "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"

#	Remember: type bindings are given on a single line.
#	Example XML schema and C/C++ type bindings:

xsd__int	= | int

# Novell GroupWise
ngw = "http://schemas.novell.com/2005/01/GroupWise/groupwise.wsdl"
ngwt = "http://schemas.novell.com/2005/01/GroupWise/types"
ngwm = "http://schemas.novell.com/2005/01/GroupWise/methods"
ngwe = "http://schemas.novell.com/2005/01/GroupWise/events"
xsd__dateTime  = | char* | char*

#	With SOAP encoded arrays, the SOAP-ENC:arrayType attribute is defined
#	but we really don't need it because we never use it

SOAP_ENC__arrayType	= | char* | char*

#	To use regular char* strings instead of std::string, use:

# xsd__string	= | char* | char*

#	WS-Policy imports wsu:Id

wsu__Id		= typedef char *wsu__Id; | wsu__Id | wsu__Id

#	To use regular char* strings serialized with xsi:type attributes, use:

# xsd__string	= typedef char *xsd__string; | xsd__string | xsd__string

#	More examples:

# xsd__boolean = enum xsd__boolean { false_, true_ }; | enum xsd__boolean

# xsd__base64Binary = class xsd__base64Binary { unsigned char *__ptr; int __size; }; | xsd__base64Binary | xsd__base64Binary
