/* soapStub.h
   Generated by gSOAP 2.7.0d from /build/kde/cvs/pim/kdepim/kresources/groupwise/soap/groupwise.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under one of the following three licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
   See README.txt for further details.
*/
#ifndef soapStub_H
#define soapStub_H
#include <deque>
#include <list>
#include <vector>
#include <set>
#include "stdsoap2.h"

SOAP_BEGIN_NAMESPACE(soap)

/* Enumerations */

#ifndef _SOAP_ns1__AcceptLevel
#define _SOAP_ns1__AcceptLevel
enum ns1__AcceptLevel {Free = 0, Tentative = 1, Busy = 2, OutOfOffice = 3};
#endif

#ifndef _SOAP_ns1__CategoryType
#define _SOAP_ns1__CategoryType
enum ns1__CategoryType {Normal = 0, Personal = 1, Follow_up = 2, Urgent = 3, LowPriority = 4};
#endif

#ifndef _SOAP_ns1__ContactType
#define _SOAP_ns1__ContactType
enum ns1__ContactType {Contact = 0, Group = 1, Resource = 2, Organization = 3};
#endif

#ifndef _SOAP_ns1__CursorSeek
#define _SOAP_ns1__CursorSeek
enum ns1__CursorSeek {current = 0, start = 1, end = 2};
#endif

#ifndef _SOAP_ns1__DistributionType
#define _SOAP_ns1__DistributionType
enum ns1__DistributionType {TO = 0, CC = 1, BC = 2};
#endif

#ifndef _SOAP_ns1__FilterOp
#define _SOAP_ns1__FilterOp
enum ns1__FilterOp {and_ = 0, or_ = 1, not_ = 2, eq = 3, ne = 4, gt = 5, lt = 6, gte = 7, lte = 8, contains = 9, containsWord = 10, begins = 11, exists = 12, notExist = 13};
#endif

#ifndef _SOAP_ns1__FolderACLStatus
#define _SOAP_ns1__FolderACLStatus
enum ns1__FolderACLStatus {pending = 0, accepted = 1, deleted = 2};
#endif

#ifndef _SOAP_ns1__FolderType
#define _SOAP_ns1__FolderType
enum ns1__FolderType {Mailbox = 0, SentItems = 1, WorkInProgress = 2, Trash = 3, Calendar = 4, Contacts = 5, Documents = 6, Checklist = 7, Cabinet = 8, Normal_ = 9, NNTP = 10, IMAP = 11, Query = 12, JunkMail = 13};
#endif

#ifndef _SOAP_ns1__ItemClass
#define _SOAP_ns1__ItemClass
enum ns1__ItemClass {Public = 0, Private = 1, Confidential = 2};
#endif

#ifndef _SOAP_ns1__ItemOptionsPriority
#define _SOAP_ns1__ItemOptionsPriority
enum ns1__ItemOptionsPriority {High = 0, Standard = 1, Low = 2};
#endif

#ifndef _SOAP_ns1__ItemSource
#define _SOAP_ns1__ItemSource
enum ns1__ItemSource {received = 0, sent = 1, draft = 2, personal = 3};
#endif

#ifndef _SOAP_ns1__OccurrenceType
#define _SOAP_ns1__OccurrenceType
enum ns1__OccurrenceType {First = 0, Second = 1, Third = 2, Fourth = 3, Last = 4};
#endif

#ifndef _SOAP_ns1__PhoneNumberType
#define _SOAP_ns1__PhoneNumberType
enum ns1__PhoneNumberType {Fax = 0, Home = 1, Mobile = 2, Office = 3, Pager = 4};
#endif

#ifndef _SOAP_ns1__PostalAddressType
#define _SOAP_ns1__PostalAddressType
enum ns1__PostalAddressType {Home_ = 0, Office_ = 1};
#endif

#ifndef _SOAP_ns1__RecipientType
#define _SOAP_ns1__RecipientType
enum ns1__RecipientType {User = 0, PersonalGroup = 1, SystemGroup = 2, PersonalGroupMember = 3, SystemGroupMember = 4, Resource_ = 5};
#endif

#ifndef _SOAP_ns1__StatusTrackingOptions
#define _SOAP_ns1__StatusTrackingOptions
enum ns1__StatusTrackingOptions {None = 0, Delivered = 1, DeliveredAndOpened = 2, All = 3, Full = 4};
#endif

#ifndef _SOAP_ns1__WeekDay
#define _SOAP_ns1__WeekDay
enum ns1__WeekDay {Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6};
#endif

/* Classes and Structs */



/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element */
	char *type;	/* optional element */
	char *option;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

#if 0 /* volatile */

#endif

/* ns1:AccessControlList: */
class SOAP_CMAC ns1__AccessControlList
{
public:
	std::vector<class ns1__AccessControlListEntry * >*entry;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns1__AccessControlList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AccessMiscRight: */
class SOAP_CMAC ns1__AccessMiscRight
{
public:
	bool *alarms;	/* optional element */
	bool *notify;	/* optional element */
	bool *readHidden;	/* optional element */
	bool *setup;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns1__AccessMiscRight */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AccessRight: */
class SOAP_CMAC ns1__AccessRight
{
public:
	bool *read;	/* optional element */
	bool *write;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns1__AccessRight */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AccessRightChanges: */
class SOAP_CMAC ns1__AccessRightChanges
{
public:
	class ns1__AccessRightEntry *add;	/* optional element */
	ns1__AccessRightEntry *_delete;	/* optional element */
	ns1__AccessRightEntry *update;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns1__AccessRightChanges */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AccessRightList: */
class SOAP_CMAC ns1__AccessRightList
{
public:
	std::vector<ns1__AccessRightEntry * >*entry;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns1__AccessRightList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AddressBookList: */
class SOAP_CMAC ns1__AddressBookList
{
public:
	std::vector<class ns1__AddressBook * >*book;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns1__AddressBookList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AttachmentInfo: */
class SOAP_CMAC ns1__AttachmentInfo
{
public:
	std::vector<class ns1__AttachmentItemInfo * >*attachment;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns1__AttachmentInfo */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AttachmentItemInfo: */
class SOAP_CMAC ns1__AttachmentItemInfo
{
public:
	class ns1__AttachmentID *id;	/* optional element */
	std::string name;	/* required element */
public:
	std::string *contentId;	/* optional element */
	std::string *contentType;	/* optional element */
	unsigned long size;	/* required element */
	char *date;	/* optional element */
	xsd__base64Binary *data;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns1__AttachmentItemInfo */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Authentication: */
class SOAP_CMAC ns1__Authentication
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns1__Authentication */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:CategoryList: */
class SOAP_CMAC ns1__CategoryList
{
public:
	std::vector<class ns1__Category * >*category;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns1__CategoryList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:CategoryRefList: */
class SOAP_CMAC ns1__CategoryRefList
{
public:
	std::vector<std::string >*category;	/* optional element */
	std::string primary;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns1__CategoryRefList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Custom: */
class SOAP_CMAC ns1__Custom
{
public:
	std::string field;	/* required element */
public:
	std::string *value;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns1__Custom */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:CustomList: */
class SOAP_CMAC ns1__CustomList
{
public:
	std::vector<ns1__Custom * >*custom;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns1__CustomList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:DeltaList: */
class SOAP_CMAC ns1__DeltaList
{
public:
	class ns1__Items *add;	/* optional element */
	ns1__Items *_delete;	/* optional element */
	ns1__Items *update;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns1__DeltaList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Distribution: */
class SOAP_CMAC ns1__Distribution
{
public:
	class ns1__From *from;	/* optional element */
	std::string *to;	/* optional element */
	std::string *cc;	/* optional element */
	std::string *bc;	/* optional element */
	class ns1__RecipientList *recipients;	/* optional element */
	class ns1__SendOptions *sendoptions;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns1__Distribution */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:EmailAddressList: */
class SOAP_CMAC ns1__EmailAddressList
{
public:
	std::vector<std::string >*email;	/* optional element */
	std::string primary;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns1__EmailAddressList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Filter: */
class SOAP_CMAC ns1__Filter
{
public:
	class ns1__FilterElement *element;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns1__Filter */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FilterElement: */
class SOAP_CMAC ns1__FilterElement
{
public:
	enum ns1__FilterOp op;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns1__FilterElement */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FolderACL: */
class SOAP_CMAC ns1__FolderACL
{
public:
	std::vector<class ns1__FolderACLEntry * >*entry;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns1__FolderACL */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FolderList: */
class SOAP_CMAC ns1__FolderList
{
public:
	std::vector<class ns1__Folder * >*folder;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns1__FolderList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyBlockList: */
class SOAP_CMAC ns1__FreeBusyBlockList
{
public:
	std::vector<class ns1__FreeBusyBlock * >*block;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns1__FreeBusyBlockList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyBlock: */
class SOAP_CMAC ns1__FreeBusyBlock
{
public:
	char *startDate;	/* optional element */
	char *endDate;	/* optional element */
	enum ns1__AcceptLevel acceptLevel;	/* required element */
	std::string subject;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns1__FreeBusyBlock */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyUserList: */
class SOAP_CMAC ns1__FreeBusyUserList
{
public:
	std::vector<class ns1__FreeBusyUser * >*user;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns1__FreeBusyUserList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyInfoList: */
class SOAP_CMAC ns1__FreeBusyInfoList
{
public:
	std::vector<class ns1__FreeBusyInfo * >*user;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns1__FreeBusyInfoList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyStats: */
class SOAP_CMAC ns1__FreeBusyStats
{
public:
	int responded;	/* required element */
	int outstanding;	/* required element */
	int total;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns1__FreeBusyStats */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FullName: */
class SOAP_CMAC ns1__FullName
{
public:
	std::string *displayName;	/* optional element */
	std::string *namePrefix;	/* optional element */
	std::string *firstName;	/* optional element */
	std::string *middleName;	/* optional element */
	std::string *lastName;	/* optional element */
	std::string *nameSuffix;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ns1__FullName */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:GroupMember: */
class SOAP_CMAC ns1__GroupMember
{
public:
	std::string id;	/* required element */
public:
	std::string *name;	/* optional element */
	std::string email;	/* required element */
public:
	enum ns1__DistributionType distType;	/* required element */
	enum ns1__ContactType itemType;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns1__GroupMember */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:GroupMemberList: */
class SOAP_CMAC ns1__GroupMemberList
{
public:
	std::vector<ns1__GroupMember * >*member;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns1__GroupMemberList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ImAddress: */
class SOAP_CMAC ns1__ImAddress
{
public:
	std::string service;	/* required element */
	std::string address;	/* required element */
	std::string type;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns1__ImAddress */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ImAddressList: */
class SOAP_CMAC ns1__ImAddressList
{
public:
	std::vector<ns1__ImAddress * >*im;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns1__ImAddressList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Item: */
class SOAP_CMAC ns1__Item
{
public:
	std::string *id;	/* optional element */
	std::string *name;	/* optional element */
	unsigned long *version;	/* optional element */
	char *modified;	/* optional element */
	class ns1__ItemChanges *changes;	/* optional element */
	std::string *type;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns1__Item */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ItemChanges: */
class SOAP_CMAC ns1__ItemChanges
{
public:
	ns1__Item *add;	/* optional element */
	ns1__Item *_delete;	/* optional element */
	ns1__Item *update;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns1__ItemChanges */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ItemOptions: */
class SOAP_CMAC ns1__ItemOptions
{
public:
	enum ns1__ItemOptionsPriority priority;	/* optional element */
	char *expires;	/* optional element */
	char *delayDeliveryUntil;	/* optional element */
	bool *concealSubject;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns1__ItemOptions */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ItemRefList: */
class SOAP_CMAC ns1__ItemRefList
{
public:
	std::vector<std::string >*item;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns1__ItemRefList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Items: */
class SOAP_CMAC ns1__Items
{
public:
	std::vector<ns1__Item * >*item;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns1__Items */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ItemStatus: */
class SOAP_CMAC ns1__ItemStatus
{
public:
	bool *accepted;	/* optional element */
	bool *completed;	/* optional element */
	bool *delegated;	/* optional element */
	bool *deleted;	/* optional element */
	bool *forwarded;	/* optional element */
	bool *opened;	/* optional element */
	bool *read;	/* optional element */
	bool *replied;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ns1__ItemStatus */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:MessageBody: */
class SOAP_CMAC ns1__MessageBody
{
public:
	std::vector<class ns1__MessagePart * >*part;	/* optional element */
	std::string defaultPart;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ns1__MessageBody */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:NameAndEmail: */
class SOAP_CMAC ns1__NameAndEmail
{
public:
	std::string *displayName;	/* optional element */
	std::string *email;	/* optional element */
	std::string *uuid;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ns1__NameAndEmail */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:OfficeInfo: */
class SOAP_CMAC ns1__OfficeInfo
{
public:
	class ns1__ItemRef *organization;	/* optional element */
	std::string *department;	/* optional element */
	std::string *title;	/* optional element */
	char *website;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ns1__OfficeInfo */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PersonalInfo: */
class SOAP_CMAC ns1__PersonalInfo
{
public:
	char *birthday;	/* optional element */
	char *website;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_ns1__PersonalInfo */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PhoneFlags: */
class SOAP_CMAC ns1__PhoneFlags
{
public:
	bool *called;	/* optional element */
	bool *pleaseCall;	/* optional element */
	bool *willCall;	/* optional element */
	bool *returnedYourCall;	/* optional element */
	bool *wantsToSeeYou;	/* optional element */
	bool *cameToSeeYou;	/* optional element */
	bool *urgent;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_ns1__PhoneFlags */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PhoneList: */
class SOAP_CMAC ns1__PhoneList
{
public:
	std::vector<class ns1__PhoneNumber * >*phone;	/* optional element */
	std::string default_;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_ns1__PhoneList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PostalAddress: */
class SOAP_CMAC ns1__PostalAddress
{
public:
	std::string *description;	/* optional element */
	std::string *streetAddress;	/* optional element */
	std::string *location;	/* optional element */
	std::string *city;	/* optional element */
	std::string *state;	/* optional element */
	std::string *postalCode;	/* optional element */
	std::string *country;	/* optional element */
	enum ns1__PostalAddressType type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_ns1__PostalAddress */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PostalAddressList: */
class SOAP_CMAC ns1__PostalAddressList
{
public:
	std::vector<ns1__PostalAddress * >*address;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_ns1__PostalAddressList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ProblemEntry: */
class SOAP_CMAC ns1__ProblemEntry
{
public:
	std::string *element;	/* optional element */
	int *code;	/* optional element */
	std::string *description;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_ns1__ProblemEntry */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ProblemList: */
class SOAP_CMAC ns1__ProblemList
{
public:
	std::vector<ns1__ProblemEntry * >*entry;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_ns1__ProblemList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ProxyList: */
class SOAP_CMAC ns1__ProxyList
{
public:
	std::vector<ns1__NameAndEmail * >*proxy;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE_ns1__ProxyList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Query: */
class SOAP_CMAC ns1__Query
{
public:
	class ns1__QueryTarget *target;	/* optional element */
	ns1__Filter *filter;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE_ns1__Query */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:QueryTarget: */
class SOAP_CMAC ns1__QueryTarget
{
public:
	std::string *source;	/* optional element */
	std::vector<std::string >*container;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_ns1__QueryTarget */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:RecipientList: */
class SOAP_CMAC ns1__RecipientList
{
public:
	std::vector<class ns1__Recipient * >*recipient;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE_ns1__RecipientList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:RecipientStatus: */
class SOAP_CMAC ns1__RecipientStatus
{
public:
	char *delivered;	/* optional element */
	char *undeliverable;	/* optional element */
	char *transferred;	/* optional element */
	char *transferDelayed;	/* optional element */
	char *downloaded;	/* optional element */
	char *retractRequested;	/* optional element */
	char *retracted;	/* optional element */
	char *opened;	/* optional element */
	char *deleted;	/* optional element */
	char *undeleted;	/* optional element */
	char *purged;	/* optional element */
	class ns1__CommentStatus *accepted;	/* optional element */
	ns1__CommentStatus *declined;	/* optional element */
	char *replied;	/* optional element */
	char *forwarded;	/* optional element */
	char *shared;	/* optional element */
	char *started;	/* optional element */
	char *completed;	/* optional element */
	char *incomplete;	/* optional element */
	class ns1__DelegatedStatus *delegated;	/* optional element */
	class ns1__DelegateeStatus *delegateeStatus;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_ns1__RecipientStatus */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:RecurrenceDateType: */
class SOAP_CMAC ns1__RecurrenceDateType
{
public:
	std::vector<char * >*date;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE_ns1__RecurrenceDateType */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ReturnNotification: */
class SOAP_CMAC ns1__ReturnNotification
{
public:
	class ns1__ReturnNotificationOptions *opened;	/* optional element */
	ns1__ReturnNotificationOptions *deleted;	/* optional element */
	ns1__ReturnNotificationOptions *accepted;	/* optional element */
	ns1__ReturnNotificationOptions *declined;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE_ns1__ReturnNotification */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ReturnNotificationOptions: */
class SOAP_CMAC ns1__ReturnNotificationOptions
{
public:
	bool mail;	/* required element */
	bool notify;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_ns1__ReturnNotificationOptions */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Rights: */
class SOAP_CMAC ns1__Rights
{
public:
	bool *read;	/* optional element */
	bool *add;	/* optional element */
	bool *edit;	/* optional element */
	bool *_delete;	/* optional element */
	bool *share;	/* optional element */
	bool *manage;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE_ns1__Rights */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SendOptionsRequestReply: */
class SOAP_CMAC ns1__SendOptionsRequestReply
{
public:
	unsigned long withinNDays;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_ns1__SendOptionsRequestReply */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SendOptions: */
class SOAP_CMAC ns1__SendOptions
{
public:
	ns1__SendOptionsRequestReply *requestReply;	/* optional element */
	std::string *mimeEncoding;	/* optional element */
	class ns1__StatusTracking *statusTracking;	/* optional element */
	ns1__ReturnNotification *notification;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE_ns1__SendOptions */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Settings: */
class SOAP_CMAC ns1__Settings
{
public:
	std::vector<class ns1__SettingsGroup * >*group;	/* optional element */
	std::vector<ns1__Custom * >*setting;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_ns1__Settings */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SettingsGroup: */
class SOAP_CMAC ns1__SettingsGroup
{
public:
	std::vector<ns1__Custom * >*setting;	/* optional element */
	std::string type;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_ns1__SettingsGroup */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SettingsList: */
class SOAP_CMAC ns1__SettingsList
{
public:
	std::vector<ns1__Custom * >*setting;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_ns1__SettingsList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SharedFolderNotification: */
class SOAP_CMAC ns1__SharedFolderNotification
{
public:
	std::string *subject;	/* optional element */
	std::string *message;	/* optional element */
	std::string *description;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_ns1__SharedFolderNotification */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Status: */
class SOAP_CMAC ns1__Status
{
public:
	int code;	/* required element */
	std::string *description;	/* optional element */
	std::string *info;	/* optional element */
	ns1__ProblemList *problems;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_ns1__Status */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Timezone: */
class SOAP_CMAC ns1__Timezone
{
public:
	std::string id;	/* required element */
	std::string description;	/* required element */
public:
	class ns1__TimezoneComponent *daylight;	/* optional element */
	ns1__TimezoneComponent *standard;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_ns1__Timezone */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:TimezoneComponent: */
class SOAP_CMAC ns1__TimezoneComponent
{
public:
	std::string name;	/* required element */
public:
	unsigned char *month;	/* optional element */
	unsigned char *hour;	/* optional element */
	unsigned char *minute;	/* optional element */
	int offset;	/* required element */
	unsigned char *day;	/* optional element */
	class ns1__DayOfWeek *dayOfWeek;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_ns1__TimezoneComponent */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:TimezoneList: */
class SOAP_CMAC ns1__TimezoneList
{
public:
	std::vector<ns1__Timezone * >*timezone;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE_ns1__TimezoneList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:UserInfo: */
class SOAP_CMAC ns1__UserInfo
{
public:
	std::string name;	/* required element */
public:
	std::string *email;	/* optional element */
	std::string *uuid;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE_ns1__UserInfo */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:acceptRequest: */
class SOAP_CMAC _ns1__acceptRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	std::string comment;	/* required element */
public:
	enum ns1__AcceptLevel acceptLevel;	/* required element */
	bool *recurrenceAllInstances;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE__ns1__acceptRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:acceptResponse: */
class SOAP_CMAC _ns1__acceptResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE__ns1__acceptResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:addItemRequest: */
class SOAP_CMAC _ns1__addItemRequest
{
public:
	std::string container;	/* required element */
	std::string id;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE__ns1__addItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:addItemResponse: */
class SOAP_CMAC _ns1__addItemResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE__ns1__addItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:addItemsRequest: */
class SOAP_CMAC _ns1__addItemsRequest
{
public:
	std::string container;	/* required element */
public:
	ns1__ItemRefList *items;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE__ns1__addItemsRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:addItemsResponse: */
class SOAP_CMAC _ns1__addItemsResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE__ns1__addItemsResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:addMembersRequest: */
class SOAP_CMAC _ns1__addMembersRequest
{
public:
	std::string container;	/* required element */
public:
	ns1__GroupMemberList *members;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE__ns1__addMembersRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:addMembersResponse: */
class SOAP_CMAC _ns1__addMembersResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE__ns1__addMembersResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:closeFreeBusySessionRequest: */
class SOAP_CMAC _ns1__closeFreeBusySessionRequest
{
public:
	int freeBusySessionId;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE__ns1__closeFreeBusySessionRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:closeFreeBusySessionResponse: */
class SOAP_CMAC _ns1__closeFreeBusySessionResponse
{
public:
	ns1__Status *status;	/* RPC return element */	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE__ns1__closeFreeBusySessionResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:completeRequest: */
class SOAP_CMAC _ns1__completeRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE__ns1__completeRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:completeResponse: */
class SOAP_CMAC _ns1__completeResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE__ns1__completeResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:createCursorRequest: */
class SOAP_CMAC _ns1__createCursorRequest
{
public:
	std::string container;	/* required element */
	std::string view;	/* required element */
public:
	ns1__Filter *filter;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE__ns1__createCursorRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:createCursorResponse: */
class SOAP_CMAC _ns1__createCursorResponse
{
public:
	int cursor;	/* required element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE__ns1__createCursorResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:createItemRequest: */
class SOAP_CMAC _ns1__createItemRequest
{
public:
	ns1__Item *item;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE__ns1__createItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:createItemResponse: */
class SOAP_CMAC _ns1__createItemResponse
{
public:
	std::string id;	/* RPC return element */	/* required element */
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE__ns1__createItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:createProxyAccessRequest: */
class SOAP_CMAC _ns1__createProxyAccessRequest
{
public:
	ns1__AccessRightEntry *entry;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE__ns1__createProxyAccessRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:createProxyAccessResponse: */
class SOAP_CMAC _ns1__createProxyAccessResponse
{
public:
	std::string id;	/* required element */
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE__ns1__createProxyAccessResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:declineRequest: */
class SOAP_CMAC _ns1__declineRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	std::string comment;	/* required element */
public:
	bool *recurrenceAllInstances;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE__ns1__declineRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:declineResponse: */
class SOAP_CMAC _ns1__declineResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE__ns1__declineResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:delegateRequest: */
class SOAP_CMAC _ns1__delegateRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	std::string commentToOrganizer;	/* required element */
	std::string commentToDelegatee;	/* required element */
public:
	ns1__Distribution *distribution;	/* optional element */
	bool *recurrenceAllInstances;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE__ns1__delegateRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:delegateResponse: */
class SOAP_CMAC _ns1__delegateResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE__ns1__delegateResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:destroyCursorRequest: */
class SOAP_CMAC _ns1__destroyCursorRequest
{
public:
	int cursor;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE__ns1__destroyCursorRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:destroyCursorResponse: */
class SOAP_CMAC _ns1__destroyCursorResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE__ns1__destroyCursorResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getAddressBookListResponse: */
class SOAP_CMAC _ns1__getAddressBookListResponse
{
public:
	ns1__AddressBookList *books;	/* RPC return element */	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE__ns1__getAddressBookListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getAttachmentRequest: */
class SOAP_CMAC _ns1__getAttachmentRequest
{
public:
	std::string id;	/* required element */
public:
	int offset;	/* required element */
	int length;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE__ns1__getAttachmentRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getAttachmentResponse: */
class SOAP_CMAC _ns1__getAttachmentResponse
{
public:
	ns1__MessagePart *part;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE__ns1__getAttachmentResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getCategoryListResponse: */
class SOAP_CMAC _ns1__getCategoryListResponse
{
public:
	ns1__CategoryList *categories;	/* RPC return element */	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE__ns1__getCategoryListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getCustomListResponse: */
class SOAP_CMAC _ns1__getCustomListResponse
{
public:
	ns1__CustomList *customs;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE__ns1__getCustomListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getDeltaRequest: */
class SOAP_CMAC _ns1__getDeltaRequest
{
public:
	std::string *AddressBookItem;	/* optional element */
	std::string *Appointment;	/* optional element */
	std::string *CalendarItem;	/* optional element */
	std::string *Contact;	/* optional element */
	std::string *Folder;	/* optional element */
	std::string *Group;	/* optional element */
	std::string *Item;	/* optional element */
	std::string *Mail;	/* optional element */
	std::string *Note;	/* optional element */
	std::string *PhoneMessage;	/* optional element */
	std::string *Task;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE__ns1__getDeltaRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getDeltaResponse: */
class SOAP_CMAC _ns1__getDeltaResponse
{
public:
	unsigned long used;	/* RPC return element */	/* required element */
	bool changed;	/* required element */
	ns1__DeltaList *deltas;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE__ns1__getDeltaResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getFolderListRequest: */
class SOAP_CMAC _ns1__getFolderListRequest
{
public:
	std::string parent;	/* required element */
	std::string view;	/* required element */
public:
	bool recurse;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE__ns1__getFolderListRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getFolderListResponse: */
class SOAP_CMAC _ns1__getFolderListResponse
{
public:
	ns1__FolderList *folders;	/* RPC return element */	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE__ns1__getFolderListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getFreeBusyRequest: */
class SOAP_CMAC _ns1__getFreeBusyRequest
{
public:
	std::string freeBusySessionId;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE__ns1__getFreeBusyRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getFreeBusyResponse: */
class SOAP_CMAC _ns1__getFreeBusyResponse
{
public:
	ns1__FreeBusyStats *freeBusyStats;	/* RPC return element */	/* optional element */
	ns1__FreeBusyInfoList *freeBusyInfo;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE__ns1__getFreeBusyResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getItemRequest: */
class SOAP_CMAC _ns1__getItemRequest
{
public:
	std::string id;	/* required element */
public:
	std::string *view;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE__ns1__getItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getItemResponse: */
class SOAP_CMAC _ns1__getItemResponse
{
public:
	ns1__Item *item;	/* RPC return element */	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE__ns1__getItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getItemsRequest: */
class SOAP_CMAC _ns1__getItemsRequest
{
public:
	std::string container;	/* required element */
	std::string view;	/* required element */
public:
	ns1__Filter *filter;	/* optional element */
	ns1__ItemRefList *items;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE__ns1__getItemsRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getItemsResponse: */
class SOAP_CMAC _ns1__getItemsResponse
{
public:
	ns1__Items *items;	/* RPC return element */	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE__ns1__getItemsResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getProxyAccessListResponse: */
class SOAP_CMAC _ns1__getProxyAccessListResponse
{
public:
	ns1__AccessRightList *accessRights;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE__ns1__getProxyAccessListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getProxyListResponse: */
class SOAP_CMAC _ns1__getProxyListResponse
{
public:
	ns1__ProxyList *proxies;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE__ns1__getProxyListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getSettingsRequest: */
class SOAP_CMAC _ns1__getSettingsRequest
{
public:
	std::string *id;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE__ns1__getSettingsRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getSettingsResponse: */
class SOAP_CMAC _ns1__getSettingsResponse
{
public:
	ns1__Settings *settings;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE__ns1__getSettingsResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:getTimezoneListResponse: */
class SOAP_CMAC _ns1__getTimezoneListResponse
{
public:
	ns1__TimezoneList *timezones;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE__ns1__getTimezoneListResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:loginRequest: */
class SOAP_CMAC _ns1__loginRequest
{
public:
	ns1__Authentication *auth;	/* optional element */
	char *language;	/* optional element */
	char *version;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE__ns1__loginRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:loginResponse: */
class SOAP_CMAC _ns1__loginResponse
{
public:
	std::string session;	/* RPC return element */	/* required element */
public:
	ns1__UserInfo *UserInfo;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE__ns1__loginResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:logoutResponse: */
class SOAP_CMAC _ns1__logoutResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE__ns1__logoutResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:markReadRequest: */
class SOAP_CMAC _ns1__markReadRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE__ns1__markReadRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:markReadResponse: */
class SOAP_CMAC _ns1__markReadResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE__ns1__markReadResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:markUnReadRequest: */
class SOAP_CMAC _ns1__markUnReadRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE__ns1__markUnReadRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:markUnReadResponse: */
class SOAP_CMAC _ns1__markUnReadResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE__ns1__markUnReadResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:modifyItemRequest: */
class SOAP_CMAC _ns1__modifyItemRequest
{
public:
	std::string id;	/* required element */
public:
	ns1__ItemChanges *updates;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE__ns1__modifyItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:modifyItemResponse: */
class SOAP_CMAC _ns1__modifyItemResponse
{
public:
	ns1__Status *status;	/* RPC return element */	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE__ns1__modifyItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:modifyProxyAccessRequest: */
class SOAP_CMAC _ns1__modifyProxyAccessRequest
{
public:
	std::string id;	/* required element */
public:
	ns1__AccessRightChanges *updates;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE__ns1__modifyProxyAccessRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:modifyProxyAccessResponse: */
class SOAP_CMAC _ns1__modifyProxyAccessResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE__ns1__modifyProxyAccessResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:modifySettingsRequest: */
class SOAP_CMAC _ns1__modifySettingsRequest
{
public:
	ns1__SettingsList *settings;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE__ns1__modifySettingsRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:modifySettingsResponse: */
class SOAP_CMAC _ns1__modifySettingsResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE__ns1__modifySettingsResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:positionCursorRequest: */
class SOAP_CMAC _ns1__positionCursorRequest
{
public:
	int cursor;	/* required element */
	enum ns1__CursorSeek seek;	/* required element */
	int offset;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE__ns1__positionCursorRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:positionCursorResponse: */
class SOAP_CMAC _ns1__positionCursorResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE__ns1__positionCursorResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:purgeDeletedItemsRequest: */
class SOAP_CMAC _ns1__purgeDeletedItemsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE__ns1__purgeDeletedItemsRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:purgeDeletedItemsResponse: */
class SOAP_CMAC _ns1__purgeDeletedItemsResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE__ns1__purgeDeletedItemsResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:purgeItemRequest: */
class SOAP_CMAC _ns1__purgeItemRequest
{
public:
	std::string container;	/* required element */
	std::string id;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE__ns1__purgeItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:purgeItemResponse: */
class SOAP_CMAC _ns1__purgeItemResponse
{
public:
	ns1__Status *status;	/* RPC return element */	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE__ns1__purgeItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:readCursorRequest: */
class SOAP_CMAC _ns1__readCursorRequest
{
public:
	int cursor;	/* required element */
	bool forward;	/* required element */
	int count;	/* required element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE__ns1__readCursorRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:readCursorResponse: */
class SOAP_CMAC _ns1__readCursorResponse
{
public:
	class ns1__ItemList *items;	/* optional element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE__ns1__readCursorResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeItemRequest: */
class SOAP_CMAC _ns1__removeItemRequest
{
public:
	std::string *container;	/* optional element */
	std::string id;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE__ns1__removeItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeItemResponse: */
class SOAP_CMAC _ns1__removeItemResponse
{
public:
	ns1__Status *status;	/* RPC return element */	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE__ns1__removeItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeItemsRequest: */
class SOAP_CMAC _ns1__removeItemsRequest
{
public:
	std::string container;	/* required element */
public:
	ns1__ItemRefList *items;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE__ns1__removeItemsRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeItemsResponse: */
class SOAP_CMAC _ns1__removeItemsResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE__ns1__removeItemsResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeMembersRequest: */
class SOAP_CMAC _ns1__removeMembersRequest
{
public:
	std::string container;	/* required element */
public:
	ns1__GroupMemberList *members;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE__ns1__removeMembersRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeMembersResponse: */
class SOAP_CMAC _ns1__removeMembersResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE__ns1__removeMembersResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeProxyAccessRequest: */
class SOAP_CMAC _ns1__removeProxyAccessRequest
{
public:
	std::string id;	/* required element */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE__ns1__removeProxyAccessRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:removeProxyAccessResponse: */
class SOAP_CMAC _ns1__removeProxyAccessResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE__ns1__removeProxyAccessResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:retractRequest: */
class SOAP_CMAC _ns1__retractRequest
{
public:
	ns1__ItemRefList *items;	/* optional element */
	std::string *comment;	/* optional element */
	char *retractingAllInstances;	/* optional element */
	char *retractCausedByResend;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE__ns1__retractRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:retractResponse: */
class SOAP_CMAC _ns1__retractResponse
{
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE__ns1__retractResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:sendItemRequest: */
class SOAP_CMAC _ns1__sendItemRequest
{
public:
	ns1__Item *item;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE__ns1__sendItemRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:sendItemResponse: */
class SOAP_CMAC _ns1__sendItemResponse
{
public:
	std::string id;	/* RPC return element */	/* required element */
public:
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE__ns1__sendItemResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:startFreeBusySessionRequest: */
class SOAP_CMAC _ns1__startFreeBusySessionRequest
{
public:
	ns1__FreeBusyUserList *users;	/* optional element */
	char *startDate;	/* optional element */
	char *endDate;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE__ns1__startFreeBusySessionRequest */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:startFreeBusySessionResponse: */
class SOAP_CMAC _ns1__startFreeBusySessionResponse
{
public:
	int freeBusySessionId;	/* RPC return element */	/* required element */
	ns1__Status *status;	/* optional element */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE__ns1__startFreeBusySessionResponse */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AccessControlListEntry: */
class SOAP_CMAC ns1__AccessControlListEntry : public ns1__NameAndEmail
{
public:
	ns1__Rights *rights;	/* optional element */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__AccessControlListEntry */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AccessRightEntry: */
class SOAP_CMAC ns1__AccessRightEntry : public ns1__NameAndEmail
{
public:
	std::string *id;	/* optional element */
	ns1__AccessRight *appointment;	/* optional element */
	ns1__AccessRight *mail;	/* optional element */
	ns1__AccessMiscRight *misc;	/* optional element */
	ns1__AccessRight *note;	/* optional element */
	ns1__AccessRight *task;	/* optional element */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__AccessRightEntry */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AddressBook: */
class SOAP_CMAC ns1__AddressBook : public ns1__Item
{
public:
	std::string *description;	/* optional element */
	bool *isPersonal;	/* optional element */
	bool *isFrequentContacts;	/* optional element */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns1__AddressBook */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:Alarm schema type: */
class SOAP_CMAC ns1__Alarm
{
public:
	int __item;
	bool enabled;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns1__Alarm */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Category: */
class SOAP_CMAC ns1__Category : public ns1__Item
{
public:
	enum ns1__CategoryType *categoryType;	/* optional element */
	unsigned long *color;	/* optional element */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns1__Category */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:CommentStatus schema type: */
class SOAP_CMAC ns1__CommentStatus
{
public:
	char *__item;
	std::string comment;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns1__CommentStatus */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ContainerItem: */
class SOAP_CMAC ns1__ContainerItem : public ns1__Item
{
public:
	std::vector<class ns1__ContainerRef * >*container;	/* optional element */
	ns1__CategoryRefList *categories;	/* optional element */
	char *created;	/* optional element */
	ns1__CustomList *customs;	/* optional element */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns1__ContainerItem */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:ContainerRef schema type: */
class SOAP_CMAC ns1__ContainerRef
{
public:
	std::string __item;
public:
	char *deleted;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns1__ContainerRef */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:DelegatedStatus schema type: */
class SOAP_CMAC ns1__DelegatedStatus
{
public:
	ns1__CommentStatus *__item;
	std::string userid;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns1__DelegatedStatus */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:DelegateeStatus: */
class SOAP_CMAC ns1__DelegateeStatus : public ns1__RecipientStatus
{
public:
	std::string userid;	/* optional attribute */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns1__DelegateeStatus */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FilterEntry: */
class SOAP_CMAC ns1__FilterEntry : public ns1__FilterElement
{
public:
	std::string field;	/* required element */
	std::string value;	/* required element */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns1__FilterEntry */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FilterGroup: */
class SOAP_CMAC ns1__FilterGroup : public ns1__FilterElement
{
public:
	std::vector<ns1__FilterElement * >*element;	/* optional element */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns1__FilterGroup */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Folder: */
class SOAP_CMAC ns1__Folder : public ns1__Item
{
public:
	std::string parent;	/* required element */
public:
	std::string *description;	/* optional element */
	int *count;	/* optional element */
	bool *hasUnread;	/* optional element */
	int *unreadCount;	/* optional element */
	unsigned long *sequence;	/* optional element */
	std::string *settings;	/* optional element */
	bool *hasSubfolders;	/* optional element */
	ns1__SharedFolderNotification *notification;	/* optional element */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns1__Folder */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyUser: */
class SOAP_CMAC ns1__FreeBusyUser : public ns1__NameAndEmail
{
public:
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns1__FreeBusyUser */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:From: */
class SOAP_CMAC ns1__From : public ns1__NameAndEmail
{
public:
	std::string *replyTo;	/* optional element */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns1__From */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ItemList: */
class SOAP_CMAC ns1__ItemList : public ns1__Items
{
public:
	int offset;	/* optional attribute */
	int count;	/* optional attribute */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns1__ItemList */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:ItemRef schema type: */
class SOAP_CMAC ns1__ItemRef
{
public:
	std::string __item;
	std::string uid;	/* optional attribute */
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns1__ItemRef */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:MessagePart schema type: */
class SOAP_CMAC ns1__MessagePart
{
public:
	xsd__base64Binary __item;
	std::string contentId;	/* optional attribute */
	std::string contentType;	/* optional attribute */
public:
	int length;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_ns1__MessagePart */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:PhoneNumber schema type: */
class SOAP_CMAC ns1__PhoneNumber
{
public:
	std::string __item;
public:
	enum ns1__PhoneNumberType type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_ns1__PhoneNumber */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PlainText: */
class SOAP_CMAC ns1__PlainText : public ns1__Authentication
{
public:
	std::string username;	/* required element */
public:
	std::string *password;	/* optional element */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_ns1__PlainText */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Proxy: */
class SOAP_CMAC ns1__Proxy : public ns1__Authentication
{
public:
	std::string username;	/* required element */
	std::string proxy;	/* required element */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_ns1__Proxy */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Recipient: */
class SOAP_CMAC ns1__Recipient : public ns1__NameAndEmail
{
public:
	enum ns1__DistributionType distType;	/* required element */
	enum ns1__RecipientType recipType;	/* required element */
	ns1__RecipientStatus *recipientStatus;	/* optional element */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE_ns1__Recipient */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:TrustedApplication: */
class SOAP_CMAC ns1__TrustedApplication : public ns1__Authentication
{
public:
	std::string name;	/* required element */
	std::string key;	/* required element */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_ns1__TrustedApplication */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:AddressBookItem: */
class SOAP_CMAC ns1__AddressBookItem : public ns1__ContainerItem
{
public:
	std::string *uuid;	/* optional element */
	std::string *comment;	/* optional element */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns1__AddressBookItem */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:AttachmentID schema type: */
class SOAP_CMAC ns1__AttachmentID
{
public:
	std::string __item;
public:
	bool itemReference;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns1__AttachmentID */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:BoxEntry: */
class SOAP_CMAC ns1__BoxEntry : public ns1__ContainerItem
{
public:
	ns1__ItemStatus *status;	/* optional element */
	std::string *thread;	/* optional element */
	std::string *msgid;	/* optional element */
	enum ns1__ItemSource *source;	/* optional element */
	char *delivered;	/* optional element */
	enum ns1__ItemClass *class_;	/* optional element */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns1__BoxEntry */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:DayOfWeek schema type: */
class SOAP_CMAC ns1__DayOfWeek
{
public:
	enum ns1__WeekDay __item;
	enum ns1__OccurrenceType occurrence;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns1__DayOfWeek */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FolderACLEntry: */
class SOAP_CMAC ns1__FolderACLEntry : public ns1__AccessControlListEntry
{
public:
	enum ns1__FolderACLStatus status;	/* required element */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns1__FolderACLEntry */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:FreeBusyInfo: */
class SOAP_CMAC ns1__FreeBusyInfo : public ns1__FreeBusyUser
{
public:
	ns1__FreeBusyBlockList *blocks;	/* optional element */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns1__FreeBusyInfo */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:QueryFolder: */
class SOAP_CMAC ns1__QueryFolder : public ns1__Folder
{
public:
	ns1__Query *query;	/* optional element */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE_ns1__QueryFolder */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SharedFolder: */
class SOAP_CMAC ns1__SharedFolder : public ns1__Folder
{
public:
	ns1__Rights *rights;	/* optional element */
	ns1__FolderACL *acl;	/* optional element */
	std::string *owner;	/* optional element */
	bool *isSharedByMe;	/* optional element */
	bool *isSharedToMe;	/* optional element */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_ns1__SharedFolder */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* Primitive ns1:StatusTracking schema type: */
class SOAP_CMAC ns1__StatusTracking
{
public:
	enum ns1__StatusTrackingOptions __item;
	bool autoDelete;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE_ns1__StatusTracking */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:SystemFolder: */
class SOAP_CMAC ns1__SystemFolder : public ns1__Folder
{
public:
	bool *isSystemFolder;	/* optional element */
	enum ns1__FolderType folder_USCOREtype;	/* required element */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_ns1__SystemFolder */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Contact: */
class SOAP_CMAC ns1__Contact : public ns1__AddressBookItem
{
public:
	ns1__FullName *fullName;	/* optional element */
	ns1__EmailAddressList *emailList;	/* optional element */
	ns1__ImAddressList *imList;	/* optional element */
	ns1__PhoneList *phoneList;	/* optional element */
	ns1__PostalAddressList *addressList;	/* optional element */
	ns1__OfficeInfo *officeInfo;	/* optional element */
	ns1__PersonalInfo *personalInfo;	/* optional element */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns1__Contact */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:ContactFolder: */
class SOAP_CMAC ns1__ContactFolder : public ns1__SystemFolder
{
public:
	std::string *addressBook;	/* optional element */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns1__ContactFolder */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Group: */
class SOAP_CMAC ns1__Group : public ns1__AddressBookItem
{
public:
	ns1__GroupMemberList *members;	/* optional element */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns1__Group */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Mail: */
class SOAP_CMAC ns1__Mail : public ns1__BoxEntry
{
public:
	std::string subject;	/* required element */
public:
	std::string *originalSubject;	/* optional element */
	ns1__Distribution *distribution;	/* optional element */
	ns1__MessageBody *message;	/* optional element */
	ns1__AttachmentInfo *attachments;	/* optional element */
	ns1__ItemOptions *options;	/* optional element */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ns1__Mail */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Organization: */
class SOAP_CMAC ns1__Organization : public ns1__AddressBookItem
{
public:
	ns1__ItemRef *contact;	/* optional element */
	std::string *phone;	/* optional element */
	std::string *fax;	/* optional element */
	ns1__PostalAddress *address;	/* optional element */
	char *website;	/* optional element */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_ns1__Organization */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Resource: */
class SOAP_CMAC ns1__Resource : public ns1__AddressBookItem
{
public:
	std::string *phone;	/* optional element */
	std::string *resourceType;	/* optional element */
	std::string *email;	/* optional element */
	ns1__ItemRef *owner;	/* optional element */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_ns1__Resource */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:CalendarItem: */
class SOAP_CMAC ns1__CalendarItem : public ns1__Mail
{
public:
	char *startDate;	/* optional element */
	ns1__RecurrenceDateType *rdate;	/* optional element */
	bool *isRecurring;	/* optional element */
	std::string *iCalId;	/* optional element */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns1__CalendarItem */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:DocumentRef: */
class SOAP_CMAC ns1__DocumentRef : public ns1__Mail
{
public:
	ns1__NameAndEmail *library;	/* optional element */
	unsigned long number;	/* required element */
	std::string *filename;	/* optional element */
	std::string docType;	/* required element */
public:
	ns1__NameAndEmail *author;	/* optional element */
	ns1__NameAndEmail *creator;	/* optional element */
	unsigned long officialVersion;	/* required element */
	unsigned long currentVersion;	/* required element */
	unsigned long version;	/* required element */
	std::string versionDescription;	/* required element */
public:
	unsigned long *fileSize;	/* optional element */
	ns1__AccessControlList *acl;	/* optional element */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns1__DocumentRef */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:PhoneMessage: */
class SOAP_CMAC ns1__PhoneMessage : public ns1__Mail
{
public:
	std::string *caller;	/* optional element */
	std::string *company;	/* optional element */
	std::string *phone;	/* optional element */
	ns1__PhoneFlags *flags;	/* optional element */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_ns1__PhoneMessage */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Appointment: */
class SOAP_CMAC ns1__Appointment : public ns1__CalendarItem
{
public:
	char *endDate;	/* optional element */
	enum ns1__AcceptLevel acceptLevel;	/* required element */
	ns1__Alarm *alarm;	/* optional element */
	bool *allDayEvent;	/* optional element */
	std::string *place;	/* optional element */
	ns1__Timezone *timezone;	/* optional element */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns1__Appointment */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Note: */
class SOAP_CMAC ns1__Note : public ns1__CalendarItem
{
public:
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_ns1__Note */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* ns1:Task: */
class SOAP_CMAC ns1__Task : public ns1__CalendarItem
{
public:
	char *dueDate;	/* optional element */
	std::string *taskPriority;	/* optional element */
	bool *completed;	/* optional element */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE_ns1__Task */
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* SOAP Header: */
struct SOAP_ENV__Header
{
	std::string session;	/* required element */
};

/* -ns1:loginRequest: */
struct __ns1__loginRequest
{
	_ns1__loginRequest *ns1__loginRequest;	/* optional element */
};

/* -ns1:getCategoryListRequest: */
struct __ns1__getCategoryListRequest
{
	std::string ns1__getCategoryListRequest;	/* required element */
};

/* -ns1:getAddressBookListRequest: */
struct __ns1__getAddressBookListRequest
{
	std::string ns1__getAddressBookListRequest;	/* required element */
};

/* -ns1:getItemRequest: */
struct __ns1__getItemRequest
{
	_ns1__getItemRequest *ns1__getItemRequest;	/* optional element */
};

/* -ns1:getItemsRequest: */
struct __ns1__getItemsRequest
{
	_ns1__getItemsRequest *ns1__getItemsRequest;	/* optional element */
};

/* -ns1:getFolderListRequest: */
struct __ns1__getFolderListRequest
{
	_ns1__getFolderListRequest *ns1__getFolderListRequest;	/* optional element */
};

/* -ns1:getDeltaRequest: */
struct __ns1__getDeltaRequest
{
	_ns1__getDeltaRequest *ns1__getDeltaRequest;	/* optional element */
};

/* -ns1:createItemRequest: */
struct __ns1__createItemRequest
{
	_ns1__createItemRequest *ns1__createItemRequest;	/* optional element */
};

/* -ns1:sendItemRequest: */
struct __ns1__sendItemRequest
{
	_ns1__sendItemRequest *ns1__sendItemRequest;	/* optional element */
};

/* -ns1:modifyItemRequest: */
struct __ns1__modifyItemRequest
{
	_ns1__modifyItemRequest *ns1__modifyItemRequest;	/* optional element */
};

/* -ns1:purgeItemRequest: */
struct __ns1__purgeItemRequest
{
	_ns1__purgeItemRequest *ns1__purgeItemRequest;	/* optional element */
};

/* -ns1:removeItemRequest: */
struct __ns1__removeItemRequest
{
	_ns1__removeItemRequest *ns1__removeItemRequest;	/* optional element */
};

/* -ns1:startFreeBusySessionRequest: */
struct __ns1__startFreeBusySessionRequest
{
	_ns1__startFreeBusySessionRequest *ns1__startFreeBusySessionRequest;	/* optional element */
};

/* -ns1:closeFreeBusySessionRequest: */
struct __ns1__closeFreeBusySessionRequest
{
	_ns1__closeFreeBusySessionRequest *ns1__closeFreeBusySessionRequest;	/* optional element */
};

/* -ns1:getFreeBusyRequest: */
struct __ns1__getFreeBusyRequest
{
	_ns1__getFreeBusyRequest *ns1__getFreeBusyRequest;	/* optional element */
};

/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element */
	char *SOAP_ENV__Node;	/* optional element */
	char *SOAP_ENV__Role;	/* optional element */
};

/* SOAP-ENV:Detail: */
struct SOAP_ENV__Detail
{
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};

/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element */
	char *faultstring;	/* optional element */
	char *faultactor;	/* optional element */
	struct SOAP_ENV__Detail *detail;	/* optional element */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element */
	char *SOAP_ENV__Reason;	/* optional element */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element */
};

/* Types With Custom (De)serializers: */

/* Typedefs */
typedef char *_XML;
typedef char *_QName;
typedef char *xsd__anyURI;
typedef char *xsd__bool;
typedef char *xsd__date;
typedef char *xsd__decimal;
typedef char *xsd__language;
typedef std::string ns1__View;
typedef unsigned char ns1__Day;
typedef int ns1__GMTOffset;
typedef unsigned char ns1__Hour;
typedef unsigned char ns1__Minute;
typedef unsigned char ns1__Month;
typedef std::string ns1__uid;
typedef std::string ns1__UUID;

/* Extern */

/* Remote Methods */

SOAP_FMAC5 int SOAP_FMAC6 __ns1__loginRequest(struct soap*, _ns1__loginRequest *, _ns1__loginResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getCategoryListRequest(struct soap*, std::string, _ns1__getCategoryListResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getAddressBookListRequest(struct soap*, std::string, _ns1__getAddressBookListResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getItemRequest(struct soap*, _ns1__getItemRequest *, _ns1__getItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getItemsRequest(struct soap*, _ns1__getItemsRequest *, _ns1__getItemsResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getFolderListRequest(struct soap*, _ns1__getFolderListRequest *, _ns1__getFolderListResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getDeltaRequest(struct soap*, _ns1__getDeltaRequest *, _ns1__getDeltaResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__createItemRequest(struct soap*, _ns1__createItemRequest *, _ns1__createItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__sendItemRequest(struct soap*, _ns1__sendItemRequest *, _ns1__sendItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__modifyItemRequest(struct soap*, _ns1__modifyItemRequest *, _ns1__modifyItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__purgeItemRequest(struct soap*, _ns1__purgeItemRequest *, _ns1__purgeItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__removeItemRequest(struct soap*, _ns1__removeItemRequest *, _ns1__removeItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__startFreeBusySessionRequest(struct soap*, _ns1__startFreeBusySessionRequest *, _ns1__startFreeBusySessionResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__closeFreeBusySessionRequest(struct soap*, _ns1__closeFreeBusySessionRequest *, _ns1__closeFreeBusySessionResponse *);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getFreeBusyRequest(struct soap*, _ns1__getFreeBusyRequest *, _ns1__getFreeBusyResponse *);

/* Stubs */

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__loginRequest(struct soap*, const char*, const char*, _ns1__loginRequest *, _ns1__loginResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getCategoryListRequest(struct soap*, const char*, const char*, std::string, _ns1__getCategoryListResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAddressBookListRequest(struct soap*, const char*, const char*, std::string, _ns1__getAddressBookListResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getItemRequest(struct soap*, const char*, const char*, _ns1__getItemRequest *, _ns1__getItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getItemsRequest(struct soap*, const char*, const char*, _ns1__getItemsRequest *, _ns1__getItemsResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFolderListRequest(struct soap*, const char*, const char*, _ns1__getFolderListRequest *, _ns1__getFolderListResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDeltaRequest(struct soap*, const char*, const char*, _ns1__getDeltaRequest *, _ns1__getDeltaResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createItemRequest(struct soap*, const char*, const char*, _ns1__createItemRequest *, _ns1__createItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendItemRequest(struct soap*, const char*, const char*, _ns1__sendItemRequest *, _ns1__sendItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyItemRequest(struct soap*, const char*, const char*, _ns1__modifyItemRequest *, _ns1__modifyItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__purgeItemRequest(struct soap*, const char*, const char*, _ns1__purgeItemRequest *, _ns1__purgeItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeItemRequest(struct soap*, const char*, const char*, _ns1__removeItemRequest *, _ns1__removeItemResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startFreeBusySessionRequest(struct soap*, const char*, const char*, _ns1__startFreeBusySessionRequest *, _ns1__startFreeBusySessionResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__closeFreeBusySessionRequest(struct soap*, const char*, const char*, _ns1__closeFreeBusySessionRequest *, _ns1__closeFreeBusySessionResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFreeBusyRequest(struct soap*, const char*, const char*, _ns1__getFreeBusyRequest *, _ns1__getFreeBusyResponse *);

/* Skeletons */

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__loginRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getCategoryListRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getAddressBookListRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getItemRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getItemsRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getFolderListRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getDeltaRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__createItemRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__sendItemRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__modifyItemRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__purgeItemRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__removeItemRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__startFreeBusySessionRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__closeFreeBusySessionRequest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getFreeBusyRequest(struct soap*);

SOAP_END_NAMESPACE(soap)

#endif

/* end of soapStub.h */
