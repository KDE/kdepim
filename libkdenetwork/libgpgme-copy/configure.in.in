# configure.in for GPGME
# Copyright (C) 2000 Werner Koch (dd9jn)
# Copyright (C) 2001, 2002, 2003 g10 Code GmbH
# 
# This file is part of GPGME.
# 
# GPGME is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# GPGME is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
 
# (Process this file with autoconf to produce a configure script.)

#AC_PREREQ(2.57)
#min_automake_version="1.7.6"

# Version number: Remember to change it immediately *after* a release.
#AC_INIT(gpgme, 0.4.4, [bug-gpgme@gnupg.org])
# LT Version numbers, remember to change them just *before* a release.
#   (Code changed:			REVISION++)
#   (Interfaces added/removed/changed:	CURRENT++, REVISION=0)
#   (Interfaces added:			AGE++)
#   (Interfaces removed:		AGE=0)
#
#LIBGPGME_LT_CURRENT=12
#LIBGPGME_LT_AGE=1
#LIBGPGME_LT_REVISION=1
NEED_GPG_VERSION=1.2.2
NEED_GPGSM_VERSION=1.9.3
##############################################
#AC_PREREQ(2.52)
#AC_REVISION($Revision$)

#PACKAGE=$PACKAGE_NAME
#VERSION=$PACKAGE_VERSION

#AC_CONFIG_SRCDIR(gpgme/gpgme.h)
#AM_CONFIG_HEADER(config.h)
#AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
#AM_MAINTAINER_MODE
#AC_CANONICAL_HOST

AH_VERBATIM([_GNU_SOURCE],
[/* Enable GNU extensions on systems that have them.  */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE
#endif])

dnl AH_VERBATIM([_REENTRANT],
dnl [/* To allow the use of GPGME in multithreaded programs we have to use
dnl   special features from the library.
dnl   IMPORTANT: gpgme is not yet fully reentrant and you should use it
dnl   only from one thread.  */
dnl #ifndef _REENTRANT
dnl # define _REENTRANT 1
dnl #endif])


dnl AC_PROG_CC


dnl AC_SUBST(LIBGPGME_LT_CURRENT)
dnl AC_SUBST(LIBGPGME_LT_AGE)
dnl AC_SUBST(LIBGPGME_LT_REVISION)
AC_DEFINE_UNQUOTED(NEED_GPG_VERSION, "$NEED_GPG_VERSION",
				     [Min. needed GnuPG version.])
AC_DEFINE_UNQUOTED(NEED_GPGSM_VERSION, "$NEED_GPGSM_VERSION",
				       [Min. needed GPGSM version.])

dnl AC_SUBST(PACKAGE)
dnl AC_SUBST(VERSION)
dnl AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", [Name of this package])
dnl AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [Version of this package])

# Don't default to build static libs.
dnl AC_DISABLE_STATIC
dnl AC_PROG_LIBTOOL

dnl # For now we hardcode the use of version scripts.  It would be better
dnl # to write a test for this or even implement this within libtool.
dnl have_ld_version_script=no
dnl case "${host}" in
dnl     *-*-linux*)
dnl 	have_ld_version_script=yes
dnl         ;;
dnl     *-*-gnu*)
dnl 	have_ld_version_script=yes
dnl         ;;
dnl esac
dnl AM_CONDITIONAL(HAVE_LD_VERSION_SCRIPT, test "$have_ld_version_script" = "yes")

GPG_DEFAULT=no
GPGSM_DEFAULT=no
component_system=None
case "${host}" in
    *-*-mingw32* | i?86-emx-os2 | i?86-*-os2*emx | i?86-*-msdosdjgpp* )
        # special stuff for Windoze NT
        # OS/2 with the EMX environment
        # DOS with the DJGPP environment
        AC_DEFINE(HAVE_DRIVE_LETTERS, ,
		  [Defined if we run on some of the PCDOS like systems (DOS,
		   Windoze, OS/2) with special properties like no file modes.])
        AC_DEFINE(HAVE_DOSISH_SYSTEM, ,
		  [Defined if the filesystem uses driver letters.])
	have_dosish_system=yes
        GPG_DEFAULT='c:\\gnupg\\gpg.exe'
	# XXX Assuan is not supported in this configuration.
	#GPGSM_DEFAULT='c:\\gnupg\\gpgsm.exe'
        #component_system='COM+'
        ;;
    *)
dnl 	AC_CHECK_PTH(1.2.0,,,no,have_pth=yes)
dnl 	if test "$have_pth" = yes; then
dnl 	  AC_DEFINE(HAVE_PTH, ,[Define if we have Pth.])
dnl 	  CFLAGS="$CFLAGS $PTH_CFLAGS"
dnl 	fi
dnl 	AC_CHECK_LIB(pthread,pthread_create,have_pthread=yes)
dnl 	if test "$have_pthread" = yes; then
dnl 	  AC_DEFINE(HAVE_PTHREAD, ,[Define if we have pthread.])
dnl 	fi

	# XXX: Probably use exec-prefix here?
#	GPG_DEFAULT='/usr/bin/gpg'
#	GPGSM_DEFAULT='/usr/bin/gpgsm'
	;;
esac

if test "$have_dosish_system" = yes; then
   AC_DEFINE(HAVE_DOSISH_SYSTEM,1,
             [Defined if we run on some of the PCDOS like systems·
              (DOS, Windoze. OS/2) with special properties like
              no file modes])
fi
AM_CONDITIONAL(HAVE_DOSISH_SYSTEM, test "$have_dosish_system" = "yes")
dnl AM_CONDITIONAL(HAVE_PTH, test "$have_pth" = "yes")
dnl AM_CONDITIONAL(HAVE_PTHREAD, test "$have_pthread" = "yes")
dnl dnl 

# Checks for header files.
AC_CHECK_HEADERS(sys/select.h)


# Type checks.
AC_CHECK_SIZEOF(unsigned int)


# Checks for compiler features.
dnl if test "$GCC" = yes; then
dnl    GPGME_OWN_CFLAGS="-Wall -Wcast-align -Wshadow -Wstrict-prototypes"
dnl else
dnl    GPGME_OWN_CFLAGS=""
dnl fi
dnl AC_SUBST(GPGME_OWN_CFLAGS)


# Checks for library functions.
AC_CHECK_FUNCS(stpcpy)

AC_CHECK_FUNCS(vasprintf)
if test "$ac_cv_func_vasprintf" != yes; then
  GNUPG_CHECK_VA_COPY
fi

# Try to find a thread-safe version of getenv().
have_thread_safe_getenv=no

dnl Definition of jm_GLIBC21 inlined:
    AC_CACHE_CHECK(whether we are using the GNU C Library 2.1 or newer,
      ac_cv_gnu_library_2_1,
      [AC_EGREP_CPP([Lucky GNU user],
        [
#include <features.h>
#ifdef __GNU_LIBRARY__
 #if (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1) || (__GLIBC__ > 2)
  Lucky GNU user
 #endif
#endif
        ],
        ac_cv_gnu_library_2_1=yes,
        ac_cv_gnu_library_2_1=no)
      ]
    )
    AC_SUBST(GLIBC21)
    GLIBC21="$ac_cv_gnu_library_2_1"

dnl

if test $GLIBC21 = yes; then
  have_thread_safe_getenv=yes
fi
if test $have_thread_safe_getenv = yes; then
  AC_DEFINE(HAVE_THREAD_SAFE_GETENV, [1], [Define if getenv() is thread-safe])
fi
have_getenv_r=no
AC_CHECK_FUNCS(getenv_r, have_getenv_r=yes)
if test $have_getenv_r = no && test $have_thread_safe_getenv = no; then
  AC_MSG_WARN([
***
*** getenv() is not thread-safe and getenv_r() does not exist
***])
fi

# For converting time strings to seconds since Epoch, we need the timegm
# function.
AC_CHECK_FUNCS(timegm)
if test "$ac_cv_func_timegm" != yes; then
  AC_MSG_WARN([
***
*** timegm() not available - a non-thread-safe kludge will be used
*** and the TZ variable might be changed at runtime.
***])
fi

# Add a few constants to help porting to W32
AH_VERBATIM([SEPCONSTANTS],
[
/* Separators as used in file names and $PATH. Please note that the
   string version must not contain more than one character because
   the using code assumes strlen()==1 */
#ifdef HAVE_DOSISH_SYSTEM
#define DIRSEP_C '\\\\'
#define EXTSEP_C '.'
#define DIRSEP_S "\\\\"
#define EXTSEP_S "."
#define PATHSEP_C ';'
#define PATHSEP_S ";"
#else
#define DIRSEP_C '/'
#define EXTSEP_C '.'
#define DIRSEP_S "/"
#define EXTSEP_S "."
#define PATHSEP_C ':'
#define PATHSEP_S ":"
#endif
])

AH_BOTTOM([
/* Definition of GCC specific attributes.  */
#if __GNUC__ > 2 
# define GPGME_GCC_A_PURE  __attribute__ ((__pure__))
#else
# define GPGME_GCC_A_PURE
#endif
])

dnl # Checking for libgpg-error.
dnl AM_PATH_GPG_ERROR(0.5,, AC_MSG_ERROR([libgpg-error was not found]))
dnl AC_DEFINE(GPG_ERR_SOURCE_DEFAULT, GPG_ERR_SOURCE_GPGME,
dnl           [The default error source for GPGME.])



# Checks for system services
NO_OVERRIDE=no
AC_ARG_WITH(gpg,
	    AC_HELP_STRING([--with-gpg=PATH], [use GnuPG binary at PATH]),
	    GPG=$withval, NO_OVERRIDE=yes)
if test "$NO_OVERRIDE" = "yes" || test "$GPG" = "yes"; then
  GPG=
  NO_OVERRIDE=yes
  if test "$cross_compiling" != "yes"; then
    AC_PATH_PROG(GPG, gpg)
  fi
  if test -z "$GPG"; then
    GPG="$GPG_DEFAULT"
  fi
fi
if test "$GPG" = no; then
  if test "$NO_OVERRIDE" = "yes"; then
    if test "$cross_compiling" != "yes"; then
      AC_MSG_WARN([
***
*** Could not find GnuPG, install GnuPG or use --with-gpg=PATH to enable it
***])
    else
      AC_MSG_ERROR([
***
*** Can not determine path to GnuPG when cross-compiling, use --with-gpg=PATH
***])
    fi
  fi
else
  AC_DEFINE_UNQUOTED(GPG_PATH, "$GPG", [Path to the GnuPG binary.])
  AC_SUBST(GPG)
fi
AM_CONDITIONAL(RUN_GPG_TESTS,
  [test "$cross_compiling" != "yes" && test -n "$GPG" && test -r "$GPG"])
AC_SUBST(GPG_PATH)

NO_OVERRIDE=no
AC_ARG_WITH(gpgsm,
	    AC_HELP_STRING([--with-gpgsm=PATH], [use GpgSM binary at PATH]),
	    GPGSM=$withval, NO_OVERRIDE=yes)
if test "$NO_OVERRIDE" = "yes" || test "$GPGSM" = "yes"; then
  GPGSM=
  NO_OVERRIDE=yes
  if test "$cross_compiling" != "yes"; then
    AC_PATH_PROG(GPGSM, gpgsm)
  fi
  if test -z "$GPGSM"; then
    GPGSM="$GPGSM_DEFAULT"
  fi
fi
if test "$GPGSM" = no; then
  if test "$NO_OVERRIDE" = "yes"; then
    if test "$cross_compiling" != "yes"; then
      AC_MSG_WARN([
***
*** Could not find GpgSM, install GpgSM or use --with-gpgsm=PATH to enable it
***])
    else
      AC_MSG_ERROR([
***
*** Can not determine path to GpgSM when cross-compiling, use --with-gpgsm=PATH
***])
    fi
  fi
else
  AC_DEFINE_UNQUOTED(GPGSM_PATH, "$GPGSM", [Path to the GPGSM binary.])
  AC_SUBST(GPGSM)
fi
AM_CONDITIONAL(HAVE_GPGSM, [test -n "$GPGSM" && test -r "$GPGSM"])
dnl AM_CONDITIONAL(RUN_GPGSM_TESTS,
dnl  [test "$cross_compiling" != "yes" && test -n "$GPGSM" && test -r "$GPGSM"])

dnl # FIXME: Only build if supported.
dnl AM_CONDITIONAL(BUILD_ASSUAN, test "$GPGSM" != "no")

AC_CHECK_FUNCS(funopen)

if test "$GPGSM" != "no"; then
  if test $ac_cv_func_funopen != yes; then
    # No funopen but we can implement that in terms of fopencookie.
   AC_CHECK_FUNCS(fopencookie, funopen, AC_MSG_ERROR([[No implementation of fopencookie or funopen available.]]))
  fi

  dnl it's a #define !!!
  dnl AC_CHECK_FUNCS(isascii)

  AC_CHECK_FUNCS(putc_unlocked)
  AC_CHECK_FUNCS(memrchr)
fi

# More assuan checks.
AC_CHECK_HEADERS([sys/uio.h])

echo "
	GPGME v${VERSION} has been configured as follows:

        GnuPG version: min. $NEED_GPG_VERSION
	GnuPG path:    $GPG

        GpgSM version: min. $NEED_GPGSM_VERSION
	GpgSM path:    $GPGSM
"
