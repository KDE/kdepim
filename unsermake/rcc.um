# -*-python-*-
# vim: ts=4 noet
# Copyright (C) 2005 Simon Hausmann <hausmann@kde.org>
# Licensed under whatever license unsermake is available

import handlerbase
import program
import utilities

class RCCHandler(handlerbase.HandlerBase):
	def __init__(self):
		self.name = "rcc"

	def extensions(self):
		return ['.qrc']

	def source(self, program, base, ext):
		outputBase = "qrc_" + base
		outputFileName = outputBase + ".cpp"
		outputFile = program.mfile.build + outputFileName;

		depFile = program.mfile.build + '$(DEPDIR)/%s.Ucpp' % outputBase
		program.mfile.dep_files.append("%s.Ucpp" % outputBase)

		rules = ["@echo '%s %s%s'" % (utilities.creating_text, outputFile, utilities.normal),
		         "$(RCC) -name %s -o %s $(srcdir)/%s.qrc" % (base, outputFile, base),
				 "@echo 'builddir=$$(top_builddir)/$(subdir)' > %s.tmp" % depFile,
				 "@echo 'top_builddir=$(top_builddir)' >> %s.tmp" % depFile,
				 "@echo 'targetfile=$$(top_builddir)/$(subdir)/%s' >> %s.tmp" % (outputFileName, depFile),
				 "@for file in `$(RCC) -list $(srcdir)/%s.qrc` ; do \\" % base,
				 "  if test -r $$file; then \\",
				 "    echo $$file >> %s.tmp;\\" % depFile,
				 "  fi ;\\",
				 "done; mv %s.tmp %s" % (depFile, depFile)
				]

		program.mfile.insertTarget(outputFile, [program.mfile.source + base + ".qrc"],
								   rules)

		program.handle_source(outputBase, ".cpp")

		program.cleanfiles.append(outputFileName)

handlerbase.register_handler(RCCHandler())

