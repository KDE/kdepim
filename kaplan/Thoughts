* Note: Lines starting with a # are my comments - Cornelius
* Note: Lines starting with a "z" are my comments - Zack :)

Misc:
=====

- Configuration Merge
  Idea: The KOffice way of life: Offer a method that adds a given wiget of a
  predefined type as page in a KDialogBase or offer a pointer to a KDialogBase
  -> requires a kaplan part or an external lib per part

- Merged Foldertree View
  Idea: Let the part send a description of their folders and reaction to calls
  as XML, similar to XMLGUI

# Is a folder tree really the right tool to represent events, todos or
  contacts?

z I think so. Applications could send the root of their tree to
z Kaplan so that the interface looks like

- Mail
  |    \
  |     - Local Folders
  |                   \
  |                    Inbox
  |                    |
  |                    Thrash
  |                    |
  |                    Sent
- Notes
  |    \
  |     Notes 1
  |     |
  |     Notes 2
  |
  - Events
          \
           Event 1
           |
           Event 2

z which is not that bad. The question would be how to render the tree
z on the Kaplan side while keeping the items on the parts side ( because
z e.g. KMails hold custom pixmaps for the folders which had to be
z displayed in the Kaplan tree). 


- Toolbar Items
  The KParts Technology only provides actions for the current part. It might be
  desireable to have common actions that are always available.

# Certainly. Actions like "New Mail", "New Contact", "New Event" should be
# available independently of a selected part.

- Status Bar
  We need a more sophisticated handling (progressbar, etc)

# - Kaplan plugin unification
# Currentlly all Kaplan plugins look quite similar. It would be nice, if we
# could provide infratructure to reduce duplicated code as far as possible.
  
Communication/Interaction:
==========================

- Invoking parts when they are needed for the first time takes too long,
  starting all takes too long on startup
  Idea: Mark complex parts as basic parts that get loaded anyway

# parts could be loaded in the background based on usage patterns. Kaplan could
# remeber which parts were used at the last session and load them in the
# background after loading the initial part to be shown at startup.

z This idea seems to be similar to Microsoft's
z hide-unused-item-in-the-menu strategy. But it probably mess up
z kaddressbook integration. Although not used during every session
z this part is needed and should be always loaded. This strategy
z would be great for could-to-come parts, like a summary part.
z Background loading of parts is OK. The idea is simple : load the
z last used part on startup. Make sure its loading finishes and then
z load the rest once the user can already interact with the last used
z loaded part.

- DCOP is too slow, internal communication should be handled via a dedicated
  interface, communication with external applications (i.e. knotes) should be
  done via wrapper parts that communicate with their respective IPC method to
  their application using the native protocol (DCOP, Corba, etc).

# Are you sure that DCOP is too slow for in-process communications? I thought it
# would handle this special case efficiently.
#
# Communication with external applications is something which doesn't fit too
# well with the 'integrated' approach of Kaplan. Is this really necessary?

- Security: If we use the kparts (ktrader) approach to find a parts by looking
  for an application with the correct mime type this might raise security
  problems. (Martin's concern)

# Looking up kaplan parts isn't based on mime types but on services of type
# "Kaplan/Plugin". This is just as save as starting a program statically linking
# its parts. I really don't see any security concerns here.
