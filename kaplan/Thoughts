* Note: Lines starting with a d are my comments - Daniel
* Note: Lines starting with a # are my comments - Cornelius
* Note: Lines starting with a "z" are my comments - Zack :)

Misc:
=====

d - Configuration Merge
d Idea: The KOffice way of life: Offer a method that adds a given wiget of a
d predefined type as page in a KDialogBase or offer a pointer to a KDialogBase
d -> requires a kaplan part or an external lib per part

d - Merged Foldertree View
d Idea: Let the part send a description of their folders and reaction to calls
d as XML, similar to XMLGUI

# Is a folder tree really the right tool to represent events, todos or
# contacts?

z I think so. Applications could send the root of their tree to
z Kaplan so that the interface looks like

- Mail
  |    \
  |     - Local Folders
  |                   \
  |                    Inbox
  |                    |
  |                    Thrash
  |                    |
  |                    Sent
- Notes
  |    \
  |     Notes 1
  |     |
  |     Notes 2
  |
  - Events
          \
           Event 1
           |
           Event 2

z which is not that bad. The question would be how to render the tree
z on the Kaplan side while keeping the items on the parts side ( because
z e.g. KMails hold custom pixmaps for the folders which had to be
z displayed in the Kaplan tree). 

d That raises an interesting point: The KNotes plugin would not need an own 
d canvas in the WidgetStack then. It's sufficient to have the notes in the
d folder view, an RMB menu on them and a "New Note" action.
d So the new design must be able to catch that case (the current one does not).


d - Toolbar Items
d The KParts Technology only provides actions for the current part. It might be
d desireable to have common actions that are always available.

# Certainly. Actions like "New Mail", "New Contact", "New Event" should be
# available independently of a selected part.

d - Status Bar
d We need a more sophisticated handling (progressbar, etc)

# - Kaplan plugin unification
# Currentlly all Kaplan plugins look quite similar. It would be nice, if we
# could provide infratructure to reduce duplicated code as far as possible.

d I thouht of a KaplanPart, similar to a KOPart, if that makes sense. I don't think
d a normal KPart is sufficient for us.

	
Communication/Interaction:
==========================

d Invoking parts when they are needed for the first time takes too long,
d starting all takes too long on startup
d Idea: Mark complex parts as basic parts that get loaded anyway

# parts could be loaded in the background based on usage patterns. Kaplan could
# remeber which parts were used at the last session and load them in the
# background after loading the initial part to be shown at startup.

z This idea seems to be similar to Microsoft's
z hide-unused-item-in-the-menu strategy. But it probably mess up
z kaddressbook integration. Although not used during every session
z this part is needed and should be always loaded. This strategy
z would be great for could-to-come parts, like a summary part.
z Background loading of parts is OK. The idea is simple : load the
z last used part on startup. Make sure its loading finishes and then
z load the rest once the user can already interact with the last used
z loaded part.

d DCOP is too slow, internal communication should be handled via a dedicated
d interface, communication with external applications (i.e. knotes) should be
d done via wrapper parts that communicate with their respective IPC method to
d their application using the native protocol (DCOP, Corba, etc).

# Are you sure that DCOP is too slow for in-process communications? I thought it
# would handle this special case efficiently.

d Yes, but of course one should always prefer in-process IPC if possible. DCOP 
d currently _works_ for kaplan, but that's all about it. It isn't exactly elegant.
d The only advantange of the current approach is that we can allow the user to
d run one of the parts standalone. I am not really sure we want that. I used to find
d it desireable, but I am not sure anymore.

# Communication with external applications is something which doesn't fit too
# well with the 'integrated' approach of Kaplan. Is this really necessary?

d We won't get around it, think knotes, maybe sync tools, think abstact 3rd party
d projects (not sure the latter is really that important, but we should consider it.
d it barely plays a role anyway).

d - Security: If we use the kparts (ktrader) approach to find a parts by looking
d for an application with the correct mime type this might raise security
d problems. (Martin's concern)

# Looking up kaplan parts isn't based on mime types but on services of type
# "Kaplan/Plugin". This is just as save as starting a program statically linking
# its parts. I really don't see any security concerns here.

d Ok, if we limit stuff to Kaplan/Plugin and Kaplan/Part that might be safe enough 
d indeed. I (and Martin, who raise this concern initially) was just afraid of 
d allowing "any" part.
